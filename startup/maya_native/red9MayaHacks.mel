/*
Created on 2 May 2013

------------------------------------------
Red9 Studio Pack: Maya Pipeline Solutions
Author: Mark Jackson
email: rednineinfo@gmail.com
------------------------------------------

These are simple procs that the hacked scripts call to add to 
their menu's. These are here so that I'm not hacking each script
separately, means I have 1 place to modify the calls for the future

Note to self!: menu calls should NOT use '-sourceType "python"' 
as this would then mean managing versions, 2011 and below has no
such arg in the menu calls
================================================================
*/


global proc red9HackChannelBox(string $parent)
{
	 //hack the ChannelBox RMB popup menu
	
	 menuItem -p $parent -d true;
	 menuItem -label ("Red9 : HUD")
	 	-subMenu true 
	 	-tearOff true
	 	-p $parent red9HUDsubmenu;
	 menuItem -label ("HUD: Monitor CB selection") 
		-p red9HUDsubmenu
		-ann "Add the selected ChannelBox attrs to the HUD node for monitoring"
		-c "python(\"import Red9.core.Red9_Meta as r9Meta;r9Meta.monitorHUDaddCBAttrs()\")" red9HUDaddStaticItem;
	 menuItem -label ("HUD: Remove CB selection") 
		-p red9HUDsubmenu
		-ann "Remove the selected ChannelBox attrs from the HUD"
		-c "python(\"import Red9.core.Red9_Meta as r9Meta;r9Meta.monitorHUDremoveCBAttrs()\")" red9HUDremoveItem;
	 menuItem -divider true -p red9HUDsubmenu;
	 menuItem -label ("HUD: Show as HeadsUp") 
		-p red9HUDsubmenu
		-ann "switch to standard Heads up data"
		-c "python(\"import Red9.core.Red9_Meta as r9Meta;r9Meta.monitorHUDManagement('refreshHeadsUp')\")" red9HUDrefreshHeadsUpItem;	
	 menuItem -label ("HUD: Show as Sliders") 
		-p red9HUDsubmenu
		-ann "switch the HUD mode to sliders"
		-c "python(\"import Red9.core.Red9_Meta as r9Meta;r9Meta.monitorHUDManagement('refreshSliders')\")" red9HUDrefreshSlidersItem;		 
	 menuItem -label ("HUD: Show Off") 
		-p red9HUDsubmenu
		-ann "turn off the HUD but leave the attrs wired to it"
		-c "python(\"import Red9.core.Red9_Meta as r9Meta;r9Meta.monitorHUDManagement('kill')\")" red9HUDkillItem;	
	 menuItem -divider true -p red9HUDsubmenu;
	 menuItem -label ("HUD: Delete") 
		-p red9HUDsubmenu
		-ann "destroy the HUD itself and cleanup"
		-c "python(\"import Red9.core.Red9_Meta as r9Meta;r9Meta.monitorHUDManagement('delete')\")" red9HUDdeleteItem;	

}


global proc red9HackGraphCurveMenu(string $parent)
{
	 //hack the GraphEditor 'curve' menu
	 menuItem -d true;
	 menuItem -label "Red9: Randomizer"
		-annotation "Add Noise to Curves"	
		-p $parent			
		-c "python(\"import Red9.core.Red9_AnimationUtils as r9Anim;r9Anim.RandomizeKeys().curveMenuFunc()\")"
		-dragMenuCommand "python(\"import Red9.core.Red9_AnimationUtils as r9Anim;r9Anim.RandomizeKeys().curveMenuFunc()\")"
		noiseItem;
	 menuItem -optionBox true
		-annotation "Noise Settings" 
		-p $parent
		-c "python(\"import Red9.core.Red9_AnimationUtils as r9Anim;r9Anim.RandomizeKeys.showOptions()\")"
		-dragMenuCommand "python(\"import Red9.core.Red9_AnimationUtils as r9Anim;r9Anim.RandomizeKeys.showOptions()\")"
		noiseOptionsItem;
	 menuItem -label "Red9: Interactive Simplify"
		-annotation "Interactively simplify and filter animCurves"	
		-p $parent			
		-c "python(\"import Red9.core.Red9_AnimationUtils as r9Anim;r9Anim.FilterCurves.show()\")"
		-dragMenuCommand "python(\"import Red9.core.Red9_AnimationUtils as r9Anim;r9Anim.FilterCurves.show()\")";
}


global proc red9HackScriptEditorPopup(string $parent)
{
	 //hack the ScriptEditor marking menu
	 
	 menuItem -radialPosition "SW" 
		 -parent $parent 
	 	 -label "Red9: InspectFunction"
	 	 -command "handleScriptEditorAction \"copy\";red9_InspectCode";
}


global proc red9HackTraxMenu(string $parent)
{
	//hack Red9_Sound to the Trax Editor menuBar
     menu -label "Red9_Sound" -tearOff true -allowOptionBoxes true "redNineTraxRoot";
 
	 menuItem -label ("Offset Manager") 
		-p "redNineTraxRoot"
		-ann "offset / nudge multiple audio nodes in one go"
		-c "python(\"import Red9.core.Red9_Audio as r9Audio;r9Audio.AudioToolsWrap().show()\")" red9TraxOffsetItem;	 
	 menuItem -d true;
	 menuItem -label ("Activate Selected Audio") 
		-p "redNineTraxRoot"
		-ann "set the current selected audio node to be active in the timeline"
		-c "python(\"import Red9.core.Red9_Audio as r9Audio;r9Audio.AudioHandler().setActive()\")" red9TraxActiveItem;
	 menuItem -label ("Set Timeline to Selected") 
		-p "redNineTraxRoot"
		-ann "set the timeline to the extents of the selected, or all audio nodes"
		-c "python(\"import Red9.core.Red9_Audio as r9Audio;r9Audio.AudioHandler().setTimelineToAudio()\")" red9TraxTimelineItem;	
	menuItem -label ("Focus on Selected") 
		-p "redNineTraxRoot"
		-ann "Runs the setActive then the setTimelines in one go for speed"
		-c "python(\"import Red9.core.Red9_Audio as r9Audio;r9Audio.AudioHandler().setTimelineToAudio();r9Audio.AudioHandler().setActive()\")" red9TraxFocusItem;		
	 menuItem -d true;
	 menuItem -label ("Mute Selected") 
		-p "redNineTraxRoot"
		-c "python(\"import Red9.core.Red9_Audio as r9Audio;r9Audio.AudioHandler().muteSelected(True)\")" red9TraxMuteSelectedItem;
	 menuItem -label ("UnMute Selected") 
		-p "redNineTraxRoot"
		-c "python(\"import Red9.core.Red9_Audio as r9Audio;r9Audio.AudioHandler().muteSelected(False)\")" red9TraxUnmuteSelectedItem;
	 menuItem -label ("Lock Selected") 
		-p "redNineTraxRoot"
		-ann "Locks the time inputs for the selected audio nodes, stopping them being accidentally dragged in time"
		-c "python(\"import Red9.core.Red9_Audio as r9Audio;r9Audio.AudioHandler().lockTimeInputs(True)\")" red9TraxLockSelectedItem;
	 menuItem -label ("UnLock Selected") 
		-p "redNineTraxRoot"
		-ann "UnLock the time inputs for the selected audio nodes, allowing them to be moved in time"
		-c "python(\"import Red9.core.Red9_Audio as r9Audio;r9Audio.AudioHandler().lockTimeInputs(False)\")" red9TraxUnlockSelectedItem;
	 menuItem -label ("Delete Selected Audio") 
		-p "redNineTraxRoot"
		-ann "Mainly for Maya2013 where the delete of audio nodes was broken!"
		-c "python(\"import Red9.core.Red9_Audio as r9Audio;r9Audio.AudioHandler().deleteSelected()\")" red9TraxDeleteItem;
	 menuItem -d true;
	 menuItem -label ("Combine Audio") 
		-p "redNineTraxRoot"
		-ann "Combine either selected, or ALL wavs into a single audio track - perfect for playblasting multiple audios"
		-c "python(\"import Red9.core.Red9_Audio as r9Audio;r9Audio.combineAudio()\")" red9TraxCombineItem;
	 menuItem -d true;
	 menuItem -label ("Open Audio Path") 
		-p "redNineTraxRoot"
		-ann "show the path in an OS Explorer"
		-c "python(\"import Red9.core.Red9_Audio as r9Audio;r9Audio.AudioNode().openAudioPath()\")" red9TraxOpenPathItem;
	 menuItem -label ("Format SoundNode Names") 
		-p "redNineTraxRoot"
		-ann "rename the sound nodes to their respective short file name for consistency"
		-c "python(\"import Red9.core.Red9_Audio as r9Audio;r9Audio.AudioHandler().formatNodes_to_Path()\")" red9TraxWavRenameItem;
	 menuItem -label ("Inspect Wav Format") 
		-p "redNineTraxRoot"
		-ann "open up the inspector and show internal details about wav formats"
		-c "python(\"import Red9.core.Red9_Audio as r9Audio;r9Audio.inspect_wav()\")" red9TraxWavInspectItem;

}